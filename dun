#!/bin/bash

# Freeform task tracking for plain text notes


_error() {
  echo "Error: $1" 1>&2
  exit 1
}


_dun_list_tags() {
  # -R = recursive
  # -s = --no-messages
  # -h = --no-filename
  # -o = --only-matching
  cd "$NOTES_DIR" && grep -R -s -h -o "#[^# \"',.]\+" * | sort | uniq
}


_dun_update_vim_dictionary() {
  # Write tags and statuses to vim dictionary file

  for s in ${STATUSES_TODO[@]} ${STATUSES_BLOCK[@]} ${STATUSES_DONE[@]}; do
    echo $s
  done

  _dun_list_tags

}


_dun_update_vim_config() {
  # Write vim conig file with respect to configured status and vim highlight group settings

  local all_statuses_regexp=""
  local all_statuses_list=""
  local todo_statuses_list=""
  local block_statuses_list=""
  local done_statuses_list=""

  echo "\" WARNING! This file is autogenerated by dun. Changes made here may be lost

\" Dictionary completion of statuses and tags
if filereadable(\".dun_vim_dictionary\")
  set complete+=k.dun_vim_dictionary
endif

\" Highlight groups for dun statuses and tags
highlight dunTODO $VIM_STATUSES_TODO_STYLE
highlight dunBLOCK $VIM_STATUSES_BLOCK_STYLE
highlight dunDONE $VIM_STATUSES_DONE_STYLE
highlight dunTAG $VIM_TAG_STYLE
"

  # Matchadd applies highlight groups to text
  for s in ${STATUSES_TODO[@]}; do
    echo "call matchadd('dunTODO', '\\<$s\\>', 50)"
    all_statuses_regexp="$all_statuses_regexp$s\|"
    all_statuses_list="$all_statuses_list'$s',"
    todo_statuses_list="$todo_statuses_list$s\|"
  done
  for s in ${STATUSES_BLOCK[@]}; do
    echo "call matchadd('dunBLOCK', '\\<$s\\>', 50)"
    all_statuses_regexp="$all_statuses_regexp$s\|"
    all_statuses_list="$all_statuses_list'$s',"
    block_statuses_list="$block_statuses_list$s\|"
  done
  for s in ${STATUSES_DONE[@]}; do
    echo "call matchadd('dunDONE', '\\<$s\\>', 50)"
    all_statuses_regexp="$all_statuses_regexp$s\|"
    all_statuses_list="$all_statuses_list'$s',"
    done_statuses_list="$done_statuses_list$s\|"
  done

  # Matchadd tags
  echo "call matchadd('dunTag', '\\v#[^ #]+', 50)"

  # Replace status shortcut

  all_statuses_regexp="\(${all_statuses_regexp%\\|}\)"
  all_statuses_list="${all_statuses_list%,}"
  todo_statuses_list="${todo_statuses_list%\\|}"
  block_statuses_list="${block_statuses_list%\\|}"
  done_statuses_list="${done_statuses_list%\\|}"

  # This is brittle and tricky, but if vim screen too small, popup will not show, in this case we want to just set status to first done status. This is dependent on items in list.
  let "default_todo_status_position=0"
  let "default_done_status_position=${#STATUSES_TODO[@]}+${#STATUSES_BLOCK[@]}+1"

  echo "
func DunReplaceStatus(id, result)
  if a:result != -1
    let new_status = get(g:status_list, a:result-1, '')
    execute 's/$all_statuses_regexp/'.new_status.'/'
    echomsg 'Status changed to '.new_status.' for task on line '.line('.')
  endif
endfunc

func! DunChangeStatus()
  \" If small window, just set any status to default done status
  if winwidth(0) < 50
    call DunReplaceStatus(0, $default_done_status_position)
  else
    call popup_create(g:status_list, #{
      \ title: 'Set status:',
      \ line: 'cursor+1',
      \ col: 'cursor+1',
      \ cursorline: 1,
      \ padding: [0,1,0,1],
      \ filter: 'popup_filter_menu',
      \ mapping: 0,
      \ callback: 'DunReplaceStatus',
    \ })
  endif
endfunc


func DunFoldStatus(id, result)
  if a:result != -1
    \" Got to escape a lot of slashes to make the execute work..
    if a:result == '1'
      set foldenable!
    else
      set foldenable
      set foldmethod=expr
      if a:result == '2'
        let g:fold_status='${done_statuses_list//\\/\\\\\\\\}'
        execute 'set foldexpr=getline(v:lnum)=~''\\\('.g:fold_status.'\\\)'''
      elseif a:result == '3'
        let g:fold_status='${done_statuses_list//\\/\\\\\\\\}\\\\\\|${block_statuses_list//\\/\\\\\\\\}'
        execute 'set foldexpr=getline(v:lnum)=~''\\\('.g:fold_status.'\\\)'''
      elseif a:result == '4'
        let g:fold_status='${block_statuses_list//\\/\\\\\\\\}'
        execute 'set foldexpr=getline(v:lnum)=~''\\\('.g:fold_status.'\\\)'''
      elseif a:result == '5'
        let g:fold_status='${todo_statuses_list//\\/\\\\\\\\}'
        execute 'set foldexpr=getline(v:lnum)=~''\\\('.g:fold_status.'\\\)'''
      else
        let g:fold_status=get(g:status_fold, a:result-1, '')
        execute 'set foldexpr=getline(v:lnum)!~''\\\('.g:fold_status.'\\\)'''
      endif

    endif
  endif
endfunc


func! DunToggleFoldStatus()
  \" If small window, just search for default todo status
  if winwidth(0) < 50
    \" Default to fold all done statuses
    call DunFoldStatus(0, 1)
  else
    call popup_create(g:status_fold, #{
      \ title: 'Fold statuses:',
      \ line: 'cursor+1',
      \ col: 'cursor+1',
      \ cursorline: 1,
      \ padding: [0,1,0,1],
      \ filter: 'popup_filter_menu',
      \ mapping: 0,
      \ callback: 'DunFoldStatus',
    \ })
  endif
endfunc

let g:status_list = [ $all_statuses_list ]
let g:status_fold = [ 'Toggle folding','Fold done','Fold done and blocked','Fold blocked','Fold todo',$all_statuses_list ]

nnoremap ds :call DunChangeStatus()<CR>
nnoremap df :call DunToggleFoldStatus()<CR>
nnoremap dn O${STATUSES_TODO[0]} 
"

}


_dun_vim_support() {
  # Setup autocomplete and syntax highlighting for vim
  if [ "$VIM_SUPPORT" = "enabled" ]; then
    _dun_update_vim_config > "$NOTES_DIR/.dun_vimrc"
    _dun_update_vim_dictionary > "$NOTES_DIR/.dun_vim_dictionary"
  fi
}


_dun_open_editor() {
  # Open file, optionally on a given line
  # If you want some other editor(!?), here is your chance;)
  filename=$1
  line_number=$2

  if [ $# -eq 2 ]; then
    line_option="+$line_number"
  fi

  # Freshen vim config before and after edit. Afterwards incase open notes directly from vim
  _dun_vim_support
  vim $line_option "$filename"
  _dun_vim_support
}


_dun_regexp_statuses() {
  # Helper function to make regexp for matching statuses
  statuses=("$@")
  regexp=''
  for s in "${statuses[@]}"; do
    regexp="$regexp|$s"
  done
  echo "(${regexp:1})"
}


_dun_colorize() {
  # Color statuses, tags and file names
  # To make this pretty there is a lot of font coloring going on
  # https://misc.flogisoft.com/bash/tip_colors_and_formatting
  # Oneliner to list colors:
  # for x in {0..8}; do for i in {30..37}; do for a in {40..47}; do echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "; done; echo; done; done; echo ""

  sed -r "\
# Colorizes output:
# Todo statuses
s/$TODOS/${ESC}${STATUSES_TODO_STYLE}&${ESC}${NORMAL_STYLE}/ \
# Block statuses
; s/$BLOCKS/${ESC}${STATUSES_BLOCK_STYLE}&${ESC}${NORMAL_STYLE}/ \
# Done statuses
; s/$DONES/${ESC}${STATUSES_DONE_STYLE}&${ESC}${NORMAL_STYLE}/ \
# Tags
; s/#[^# \"']+/${ESC}${TAGS_STYLE}&${ESC}${NORMAL_STYLE}/g \
" -
}


_dun_edit_lines() {
  # Accepts a single command that when evaluated must produce output in format <filename>:<line number>:<line text>

  local cmd="$1"

  # The loop evaluates the command argument and allows user to select a line to edit
  while true; do
    # Read result of command (must be in correct format, see above)

    selection="$(eval $cmd | _dun_colorize | fzy $FZY_LINES)"

    if [ "$selection" != "" ]; then
      IFS=':' read -r -a line <<< "$selection"
      filename="${line[0]}"
      line_number="${line[1]}"

      _dun_open_editor "$filename" "$line_number"
    else
      return
    fi

  done
}


_dun_usage() {
  printf "\e[1mUsage\e[0m dun [archive-notes|new-note|notes|recent-notes|tasks|help|task-complete-options|colorize] <note file>\n"
}

_dun_print_help() {
  echo -e '
Task tracking from freeform notes. Tasks are single lines of text containing a status and optionally one or more tags. Notes are plain text files.

    \e[1marchive-notes\e[0m
        Move notes that have no tasks, or only done tasks, to archive directory

    \e[1mnew-note\e[0m <NAME STRING>
        Create new note text file in NOTES_DIR. 

        \e[1mExample:\e[0m
            $ dun new retrospective
                File name will be retrospective (if the file name will have suffix -1, suffix will increment until the file name is unique)

    \e[1mnotes\e[0m
        List and filter note files

    \e[1mrecent-notes\e[0m [NUMBER]
        List the note ordered by modification date. NUMBER specifies how many notes to include in list, default is 9

    \e[1mtasks\e[0m [[+|-]<FILTER STRING>..]
        List and filter tasks, if dun is run with no arguments it defaults to showing tasks. Default list tasks with first status defined in TODO BLOCK (see dun.conf). Filter strings are prefixed by either + or -. Prefix + will match if the string is present, whilst prefix - means the string must be absent.

        \e[1mExample:\e[0m
            $ dun list +#ProjectA -DONE
                List tasks that are tagged #ProjectA and are not DONE

    \e[1mtags\e[0m
        List tags found in notes

    \e[1mcolorize\e[0m
        Colorize stdin

    \e[1mtask-complete-options\e[0m
        Print statuses and tags found in notes, for use with bash complete

    \e[1mhelp\e[0m
        This text.
' | fmt

  _dun_usage
}


_dun_check_dependencies() {
  for dep in "$@"; do
    command -v "$dep" >/dev/null 2>&1 || { echo >&2 "Command $dep not found"; exit 1; }
  done
}


# For all git repositories in vault, run batch commands
_git_sync() {

  local action="$1"
  local git_dir="$NOTES_DIR/.git"

  [ -d "$git_dir" ] || return

  [ "$GIT_SYNC" != "enabled" ] && return

  if ! command -v git &> /dev/null; then
      _error "git command not found"
  fi

  cd "$NOTES_DIR" || _error "Unable to cd to $NOTES_DIR"

  if [[ $(git branch -r) ]]; then
    has_remote="yes"
  else
    has_remote="no"
  fi

  case $action in
    pull)
      if [ "$has_remote" = "yes" ]; then
        #echo "Checking for updates to $git_dir.."
        git pull --quiet || _error "Unable to pull from remote repo"
      fi
    ;;
    commitpush)
      # Check if changes, if so commit and push
      if [ -n "$(git status --porcelain)" ]; then
        #echo "Modifications found in $git_dir.."
        git add -A || _error "Git add failed"
        git commit -m 'Overtake sync' --quiet || _error "Git commit failed"

        if [ "$has_remote" = "yes" ]; then
          #echo "Uploading changes to $git_dir.."
          git push --quiet || _error "Unable to push to remote git"
        fi
      fi
    ;;
    *) _error "No valid action supplied for _git_sync()" ;;
  esac
}


_dun_check_dependencies vim fzy grep awk

# Settings defaults
NOTES_DIR=~/dun
STATUSES_TODO=('TODO')
STATUSES_BLOCK=('WAIT')
STATUSES_DONE=('DONE' 'WONT')
STATUSES_TODO_STYLE='[34m'
STATUSES_BLOCK_STYLE='[31m'
STATUSES_DONE_STYLE='[32m'
TAGS_STYLE='[35m'
VIM_STATUSES_TODO_STYLE='ctermfg=4'
VIM_STATUSES_BLOCK_STYLE='ctermfg=5'
VIM_STATUSES_DONE_STYLE='ctermfg=2'
VIM_TAG_STYLE='ctermfg=1'
VIM_SUPPORT='disabled'
GIT_SYNC='disabled'

# Load config file
conf_file=~/.config/dun.conf
if [ -f $conf_file ]; then
  source $conf_file
fi

# Setup globals
ESC=$(printf '\033')
NORMAL_STYLE='[37m'
DEFAULT_STYLE='[0;37m'
#Work out how many lines fzy should show 
FZY_LINES="$(echo "--lines=$(( $(tput lines) -2 ))")"

TODOS="$(_dun_regexp_statuses "${STATUSES_TODO[@]}")"
BLOCKS="$(_dun_regexp_statuses "${STATUSES_BLOCK[@]}")"
DONES="$(_dun_regexp_statuses "${STATUSES_DONE[@]}")"

# Create notes dir if it doesn't exist
if [ -d "$NOTES_DIR" ]; then
  cd "$NOTES_DIR"
else
  echo -e "$NOTES_DIR does not exist (change NOTES_DIR in dun.conf for another location), type [c] to create or anything else to exit"
  read selection
  if [ "$selection" = "c" ]; then
    mkdir -p "$NOTES_DIR"
  else
    exit 0
  fi 
fi

if [ $# -eq 0 ]; then
  action="tasks"
else
  action=$1
fi

case $action in
  help|task-complete-options|colorize) : ;; # Don't sync git
  *) _git_sync pull ;;
esac

case $action in
  help)
     _dun_print_help
   ;;

  archive-notes)
    # Archiving means making file hidden

    while true; do
      # List notes that have no TODO or WAIT status tasks
      # Tasks statuses that still have work pending
      live_statuses=("${STATUSES_TODO[@]}" "${STATUSES_BLOCK[@]}")
      regexp=''

      for s in ${live_statuses[@]}; do
        regexp="$regexp\|$s"
      done
      regexp="${regexp:2}"

      # Grep to find notes with no open tasks
      # sed removes filepath
      # fzy to view and select notes to archive
      # grep
      #   -L = --files-without-match
      #   -s = --no-messages
      archive_candidates="$(
        {
          for item in $(find "$NOTES_DIR" -not -path '*/.*' -type f); do
            [ -f "$item" ] && grep "$regexp" -L -s "$item"
          done
        } | sed "s#^$NOTES_DIR/##"
      )"

      [ "$archive_candidates" = "" ] && break

      candidate="$(echo "$archive_candidates" | fzy $FZY_LINES)"

      [ "$candidate" = "" ] && break

      candidate_abs_path="$NOTES_DIR/$candidate"

      # Option to view, arvhive or go back
      while true; do
        action="$(echo -e "View $candidate\nArchive $candidate" | fzy $FZY_LINES)"
        [ "$action" = "" ] && break

        case $action in
          View*) _dun_open_editor "$candidate" ;;
          Archive*)
            # Hide file
            filename="${candidate_abs_path##*/}"
            dirname="${candidate_abs_path%/*}"
            archive_file="$dirname/.$filename"
            mv "$candidate_abs_path" "$archive_file"
            echo -e "Archived as $archive_file"
            break
          ;;
        esac
      done
    done
  ;;

  notes)
    # Search notes dir, select note and open selection in editor

    while true; do
      f="$(find "$NOTES_DIR" -not -path '*/.*' -type f \
      | sed "s#$NOTES_DIR/##g" \
      | fzy $FZY_LINES)"

      # Exit cleanly if no selection was made
      [ "$f" = "" ] && break

      [ -e "$f" ] && _dun_open_editor "$f"
    done
  ;;

  new-note)
    # Create new file in NOTES_DIR

    if [ $# -eq 2 ]; then
      note_name=$2
    else
      note_name='note'
    fi

    new_file="$NOTES_DIR/$note_name"

    # If file exists find a uniq integer suffix
    if [ -e "$new_file" ]; then
      num=1
      while [ -e "${new_file}-$num" ]; do
        num=$((num +1))
      done
      new_file="${new_file}-$num"
    fi

    _dun_open_editor "$new_file"
  ;;

  recent-notes)
    # Present selection of notes listed by modification date
    # Use awk and sed to mangle lines so they confirm to expected input

    while true; do
      selection="$(LC_ALL=en_US.UTF-8 find "$NOTES_DIR" -not -path '*/.*' -type f -exec date -r {} +%s:%Y-%m-%d:{} \; | sort --reverse | awk 'BEGIN { FS = ":" } ; { print $3":"$2 }' | sed "s#^$NOTES_DIR/##" | fzy $FZY_LINES)"

      if [ "$selection" != "" ]; then
        _dun_open_editor "$NOTES_DIR/${selection%%:*}"
      else
        break
      fi
    done
  ;;

  tasks)
    # List tasks filtered by +<word> -<word>

    awk_filter=''
    filters=''

    if [ $# -lt 2 ]; then
      # If no filters provided, default to first todo status
      for s in ${STATUSES_TODO[0]}; do
        awk_filter="$awk_filter && /$s/"
        filters="$filters +${s}"
      done
    else
      shift

      ## Create awk command to filter lines and set arguments
      while (( $# )); do
        filters="$filters $1"
        case ${1:0:1} in
          +)
            awk_filter="$awk_filter && /${1:1}/"
            ;;
          -)
            awk_filter="$awk_filter && !/${1:1}/"
            ;;
          *)
            echo "Filters must start with either + or -"
            exit 1
            ;;
        esac
        shift
      done
    fi

    awk_filter="${awk_filter:4}" # Remove first '&& '
    # Create list of the note files, use instead of * to ensure only files and that quoteing is correct
    # The -not -path ignores dot/hidden files
    note_files="$(find "$NOTES_DIR" -not -path '*/.*' -type f | sed "s#^$NOTES_DIR/#'# ; s/$/'/" | tr '\n' ' ')"
    cmd="awk '$awk_filter {print FILENAME \":\" FNR \":\" \$0}' $note_files | sort"
    _dun_edit_lines "$cmd"
  ;;

  task-complete-options)
    # Print bash complete options

    # tags and statuses start either with a - or +|
    statuses=("${STATUSES_TODO[@]}" "${STATUSES_BLOCK[@]}" "${STATUSES_DONE[@]}")

    tags=()
    for t in $(_dun_list_tags); do
      [ "$t" = "" ] || tags+=("$t")
    done

    filters=("${statuses[@]}" "${tags[@]}")
    for ((i=0;i<${#filters[@]};i++)); do
      options="$options +${filters[$i]} -${filters[$i]}"
    done

    echo "$options" | tr -d '\n'
  ;;

  tags)
    _dun_list_tags | column -c $(tput cols) | column -t
  ;;

  colorize)
    _dun_colorize
  ;;

  *)
    if [ -f "$1" ]; then
      _dun_open_editor "$1"
    else
      echo "Unknown argument: $1"
      _dun_usage
      exit 1
    fi
  ;;

esac

case $action in
  help|task-complete-options|colorize) : ;; # Don't sync git
  *) _git_sync commitpush ;;
esac

